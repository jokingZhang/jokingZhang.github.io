{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","role","aria-label","href","rel","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NA4EeA,G,UAzEO,WACpB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,eACb,6BAASA,UAAU,sCACjB,wBAAIA,UAAU,SAAd,wBACA,6BAASA,UAAU,gBACjB,6BAASA,UAAU,gBACjB,uBAAGA,UAAU,4BACb,yBAAKA,UAAU,wCACb,gIAEE,0BAAMC,KAAK,MAAMC,aAAW,OAA5B,uCAMV,6BAASF,UAAU,sCACjB,wBAAIA,UAAU,SAAd,oBACA,wBAAIA,UAAU,oBACZ,4BACE,uBAAGA,UAAU,6BADf,eAIE,uBAAGG,KAAK,iCAAiCC,IAAI,sBAAsBC,OAAO,UAA1E,kBAEF,4CAEE,uBAAGF,KAAK,kDAAkDC,IAAI,sBAAsBC,OAAO,UAA3F,mBACF,4CAEE,uBAAGF,KAAK,0CAA0CC,IAAI,sBAAsBC,OAAO,UAAnF,mBACF,sDACA,sDAGJ,6BAASL,UAAU,sCACjB,wBAAIA,UAAU,SAAd,SAEA,yBAAKA,UAAU,sCACb,uBAAGA,UAAU,SAAb,SACA,8HAEE,uBAAGG,KAAK,SAASC,IAAI,sBAAsBC,OAAO,UAAlD,cAIJ,yBAAKL,UAAU,oCACb,uBAAGA,UAAU,SAAb,sEACA,kYAEE,uBAAGG,KAAK,4EAA4EC,IAAI,sBAAsBC,OAAO,UAArH,+CAFF,0LAIE,uBAAGF,KAAK,+DAA+DC,IAAI,sBAAsBC,OAAO,UAAxG,gBAKR,yBAAKL,UAAU,cACb,yBAAKA,UAAU,oCACb,2DACA,sCACE,uBAAGG,KAAK,2CAA2CC,IAAI,sBAAsBC,OAAO,UAApF,aADF,IAGE,uBAAGF,KAAK,gCAAgCC,IAAI,sBAAsBC,OAAO,UAAzE,4BCxDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6156f66b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"app-content\">\n        <section className=\"nes-container with-title t-wrapper\">\n          <h3 className=\"title\">Personal Information</h3> \n          <section className=\"message-list\">\n            <section className=\"message-left\">\n              <i className=\"nes-squirtle avatar-img\"></i>\n              <div className=\"nes-balloon from-left avatar-content\">\n                <p>\n                  张兜兜，前端打字员，现居北京[奋斗]\n                  <span role=\"img\" aria-label=\"run\">🧗‍♂️</span>\n                </p>\n              </div>\n            </section>\n          </section>\n        </section>\n        <section className=\"nes-container with-title t-wrapper\">\n          <h3 className=\"title\">Contact & Social</h3>\n          <ul className=\"nes-list is-disc\">\n            <li>\n              <i className=\"nes-icon github is-small\"></i>  \n              &nbsp;\n              Github: \n              <a href=\"https://github.com/jokingzhang\" rel=\"noopener noreferrer\" target=\"_blank\"> jokingzhang </a>\n            </li>\n            <li>\n              掘金:\n              <a href=\"https://juejin.im/user/59534d5bf265da6c4602bb8d\" rel=\"noopener noreferrer\" target=\"_blank\"> joking_zhang </a></li>\n            <li>\n              segmentfault:\n              <a href=\"https://segmentfault.com/u/joking_zhang\" rel=\"noopener noreferrer\" target=\"_blank\"> joking_zhang </a></li>\n            <li>Mail: 496691544@qq.com</li>\n            <li>WeChat: joking_zhang</li>\n          </ul>\n        </section>\n        <section className=\"nes-container with-title t-wrapper\">\n          <h3 className=\"title\">Demos</h3> \n\n          <div className=\"nes-container with-title t-wrapper\">\n            <p className=\"title\">dantd</p>\n            <p>\n              基于 antd 组件进行二次封装的业务组件\n              <a href=\"/dantd\" rel=\"noopener noreferrer\" target=\"_blank\"> portal </a>\n            </p>\n          </div>\n\n          <div className=\"nes-container is-dark with-title\">\n            <p className=\"title\">本地图书馆网站 by MDN Express Tutorial</p>\n            <p>\n              从事前端的工作已经一年半了，平时的工作主要使用 React 写写前端组件，但是自己却不具备独立部署上线网站的能力。 就找了一篇靠谱的 \n              <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs\" rel=\"noopener noreferrer\" target=\"_blank\">Express Web Framework (Node.js/JavaScript) </a>\n              教程， 将它改写为前后端分离，前端使用 React + Antd 实现，最后部署上线。\n              <a href=\"https://github.com/jokingzhang/express-locallibrary-tutorial\" rel=\"noopener noreferrer\" target=\"_blank\"> portal </a>\n            </p>\n          </div>\n        </section>\n      </div>\n      <div className=\"app-footer\">\n        <div className=\"nes-container is-rounded is-dark\">\n          <p>Joking Zhang's Blog ©2020</p>\n          <p>Power by \n            <a href=\"https://nostalgic-css.github.io/NES.css/\" rel=\"noopener noreferrer\" target=\"_blank\"> NES.css </a>\n            &\n            <a href=\"https://create-react-app.dev/\" rel=\"noopener noreferrer\" target=\"_blank\"> Create React App </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}